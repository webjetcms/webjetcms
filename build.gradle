import org.apache.tools.ant.taskdefs.condition.Os
import com.github.jk1.license.render.InventoryHtmlReportRenderer
import com.github.jk1.license.filter.LicenseBundleNormalizer

/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * Learn how to create Gradle builds at https://guides.gradle.org/creating-new-gradle-builds/
 */

plugins {
    id 'java'
    id 'war'
    https://github.com/gretty-gradle-plugin/gretty
    id 'org.gretty' version "4.1.6"
    //https://plugins.gradle.org/plugin/io.freefair.lombok
    id "io.freefair.lombok" version "8.11"
    http://jeremylong.github.io/DependencyCheck/dependency-check-gradle/index.html
    id "org.owasp.dependencycheck" version "12.1.6"
    id 'maven-publish'
    //https://docs.gradle.org/current/userguide/jacoco_plugin.html
    id 'jacoco'
    //https://github.com/jk1/Gradle-License-Report
    id 'com.github.jk1.dependency-license-report' version '2.5'
    //https://github.com/radarsh/gradle-test-logger-plugin
    id 'com.adarshr.test-logger' version '4.0.0'
}

repositories {
    mavenCentral()
    maven {
        url "https://pd4ml.tech/maven2/"
    }
    flatDir {
       dirs 'libs'
   }
}

ext {
    //pri zmene verzie je potrebne to zmenit aj v build.xml a compile.xml
    lombokVersion = "1.18.34";
    lombokMapstructBindingVersion = "0.2.0";
    mapstructVersion = "1.6.1";
    springVersion = "7.0.+";
    springDataVersion = "4.0.+";
    springSecurityVersion = "6.4.+";
    allureVersion = "2.24.0";
    aspectJVersion = '1.9.19';
}

lombok {
    version = "${lombokVersion}"
    //zrusene kvoli zbytocnym problemom s ActiveRecord config['lombok.accessors.chain'] = 'true'
    //config['lombok.addLombokGeneratedAnnotation'] = 'false'
}

war {
    zip64 = true
    exclude('**/node_modules/**')
    exclude('**/node_scripts/**')
    exclude('**/src/**')
    exclude('**/tmp/**')
    exclude('**/*.log')
    exclude('**/*.map')
    exclude('**/*.md')
    exclude('**/*.sh')
    exclude('**/.npmrc')
    exclude('**/.editorconfig')
    exclude('**/gulpfile.js')
    exclude('**/package-lock.json')
    exclude('**/package.json')
    exclude('**/webpack*.js')
    exclude('**/WEB-INF/imgcache/**')
    exclude('**/scss/**')
    exclude('scratchpad*.jsp')
    exclude('localconf*.jsp')
    exclude('**/LICENSE')
    exclude('**/*.psd')
    exclude('**/*.zip')

    //pug files
    exclude('**/pug/**')
    exclude('**/admin/v9/views/**')
    exclude('**/*.pug')
    exclude('**/prepros-6.config')

    //templates
    exclude('templates/bare/**')
    exclude('templates/agency/**')
    exclude('templates/creative/**')
    exclude('templates/firma/**')
    exclude('templates/interway/**')
    exclude('templates/kostal/**')
    exclude('templates/wa/**')
    exclude('templates/vesmir/**')

    rootSpec.exclude('**/poolman-*.xml')
}

sourceSets {
    main {
        java {
            srcDirs 'src/main/java'
            //srcDirs 'src/webjet8/java'
        }
    }
 }


configurations {
    all*.exclude group: 'org.slf4j', module: 'slf4j-log4j12'
    all*.exclude group: 'org.slf4j', module: 'jcl104-over-slf4j' //je nahradene novsim jcl-over-slf4j
    all*.exclude group: 'commons-logging', module: 'commons-logging'
    all*.exclude group: 'log4j', module: 'log4j'
    //all*.exclude group: 'xml-apis', module: 'xml-apis'

    //javax.xml.stream:stax-api:1.0-2 -> stax:stax-api:1.0.1
    //all*.exclude group: 'javax.xml.stream', module: 'stax-api'

    grettyRunnerTomcat10 {
        // gretty pouziva staru verziu commons-io, ktora koliduje s nasou
        // https://mvnrepository.com/artifact/commons-io/commons-io
        exclude group: 'commons-io', module: 'commons-io'
    }

    agent {
        canBeResolved = true
        canBeConsumed = true
    }
 }

dependencies {

    //based on https://github.com/mapstruct/mapstruct-examples/blob/main/mapstruct-lombok/build.gradle
    implementation "org.mapstruct:mapstruct:${mapstructVersion}"
    //implementation "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
    //annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    //annotationProcessor "org.projectlombok:lombok-mapstruct-binding:${lombokMapstructBindingVersion}"

    //WebJET dependencies
    //implementation("com.amazonaws:aws-java-sdk-core:1.12.+")
    //implementation("com.amazonaws:aws-java-sdk-ses:1.12.+")
    //implementation("bsf:bsf:2.4.0")
    implementation("commons-beanutils:commons-beanutils:1.11.0")
    implementation("commons-chain:commons-chain:1.2") //wjstruts
    //implementation("org.apache.commons:commons-collections4:4.4") //poi includes 4.4
    implementation("org.apache.commons:commons-compress:1.26.1")

    // https://mvnrepository.com/artifact/com.zaxxer/HikariCP
    implementation 'com.zaxxer:HikariCP:6.3.0'

    implementation("org.apache.commons:commons-fileupload2-jakarta:2.0.0-M1")
    // https://mvnrepository.com/artifact/org.apache.commons/commons-fileupload2-jakarta-servlet6
    implementation("org.apache.commons:commons-fileupload2-jakarta-servlet6:2.0.0-M2")

    implementation("commons-io:commons-io:2.18.0")
    implementation("commons-lang:commons-lang:2.6") //v2 is used in displaytag
    implementation("org.apache.commons:commons-lang3:3.19.0")

    //implementation("commons-validator:commons-validator:1.3.1") //used in struts, not required anymore
    implementation("sk.iway:wjcron4j:2.2.5-SNAPSHOT")
    //implementation("taglibs:datetime:1.0.1") //taglib datetime:

    // https://mvnrepository.com/artifact/com.github.hazendaz/displaytag
    implementation("com.github.hazendaz:displaytag:3.2.0")

    implementation("org.eclipse.persistence:eclipselink:5.0.0-B08")
    implementation("org.freemarker:freemarker:2.3.34")
    implementation("com.google.code.gson:gson:2.10.1") //generate.jsp for pagebuilder, refactor to jackson

    implementation("org.hibernate.validator:hibernate-validator:9.0.0.Final")
    implementation("jakarta.validation:jakarta.validation-api:3.0.2")

    implementation("org.apache.httpcomponents:httpclient:4.5.13")
    implementation("org.apache.httpcomponents:fluent-hc:4.5.13")
    implementation("org.apache.httpcomponents:httpmime:4.5.13")
    implementation("com.fasterxml.jackson.core:jackson-annotations:2.15.+")
    implementation("com.fasterxml.jackson.core:jackson-databind:2.15.+")
    implementation("sk.iway:wjjcaptcha:1.0-SNAPSHOT")
    //implementation("net.htmlparser.jericho:jericho-html:3.1")
    //implementation("joda-time:joda-time:2.10.13")
    //implementation("io.bit3:jsass:5.1.1")
    implementation("org.jsoup:jsoup:1.17.2")
    implementation("net.sourceforge.jtds:jtds:1.3.1")
    implementation("net.sourceforge.jexcelapi:jxl:2.6.10")
    implementation("org.apache.lucene:lucene-core:3.6.2")
    implementation("org.apache.lucene:lucene-spellchecker:3.6.2")
    implementation("org.apache.lucene:lucene-highlighter:3.6.2")
    implementation("org.apache.lucene:lucene-memory:3.6.2")
    implementation("org.apache.lucene:lucene-analyzers:3.6.2")
    implementation("org.mariadb.jdbc:mariadb-java-client:3.5.4")
    implementation("com.drewnoakes:metadata-extractor:2.19.0")
    implementation("com.oracle.database.jdbc:ojdbc8:19.8.0.0")
    //implementation("org.mcavallo:opencloud:0.3")
    implementation("com.pd4ml:pd4ml:4.0.21")
    implementation("org.apache.pdfbox:pdfbox:3.0.1")
    implementation("org.apache.poi:poi-ooxml:5.4.1")
    implementation("org.apache.poi:poi-scratchpad:5.4.1")
    implementation("org.apache.poi:poi:5.4.1")
    implementation("io.github.duckasteroid.cdb:sg-cdb-library:1.0.3")
    implementation("org.springframework:spring-aop:${springVersion}")
    implementation("org.springframework:spring-beans:${springVersion}")
    implementation("org.springframework:spring-context:${springVersion}")
    implementation("org.springframework.data:spring-data-commons:${springDataVersion}")
    implementation("org.springframework.data:spring-data-jpa:${springDataVersion}")
    implementation("org.springframework:spring-orm:${springVersion}")
    implementation("org.springframework:spring-tx:${springVersion}")
    implementation("org.springframework.security:spring-security-web:${springSecurityVersion}")
    implementation("org.springframework.security:spring-security-config:${springSecurityVersion}")
    implementation("org.springframework:spring-webmvc:${springVersion}")
    implementation("org.springframework:spring-context-support:${springVersion}")
    implementation("org.springframework:spring-test:${springVersion}")
    //implementation("org.springframework:spring-messaging:${springVersion}")
    implementation("org.springframework.plugin:spring-plugin-core:2.0.0.RELEASE")
    implementation("org.springframework.plugin:spring-plugin-metadata:2.0.0.RELEASE")

    //implementation("org.springdoc:springdoc-openapi-starter-webmvc-ui:2.5.0")
    // https://mvnrepository.com/artifact/org.springdoc/springdoc-openapi-starter-common
    //implementation("org.springdoc:springdoc-openapi-starter-common:2.8.8")
    // https://mvnrepository.com/artifact/org.webjars/swagger-ui
    implementation("org.webjars:swagger-ui:5.22.0")
    // https://mvnrepository.com/artifact/io.swagger.core.v3/swagger-annotations-jakarta
    implementation("io.swagger.core.v3:swagger-annotations-jakarta:2.2.30")
    // https://mvnrepository.com/artifact/io.swagger.core.v3/swagger-models-jakarta
    implementation("io.swagger.core.v3:swagger-models-jakarta:2.2.30")

    implementation("net.sourceforge.stripes:stripes:1.6.0-JakartaEE10")
    implementation("net.sf.trove4j:trove4j:2.1.0")  //TODO: test DocDB hashing with Integer maps
    //implementation("net.sf.uadetector:uadetector-core:0.9.22")
    //implementation("net.sf.uadetector:uadetector-resources:2014.10")
    implementation("org.apache.velocity.tools:velocity-tools-generic:3.1")
    implementation("org.json:json:20231013")
    //implementation("cryptix:cryptix:3.2.0") //HERE
    // https://mvnrepository.com/artifact/org.eclipse.angus/angus-mail = jakarta.mail/javax.mail api and implementation
    implementation("org.eclipse.angus:angus-mail:2.0.3")
    implementation("com.google.crypto.tink:tink:1.15.0")
    //implementation("com.google.protobuf:protobuf-java:3.21.7")
    implementation("ch.qos.logback:logback-core:1.5.19") //1.3 is latest branch with support for Java EE java.* namespace
    implementation("ch.qos.logback:logback-classic:1.5.19")
    implementation("org.slf4j:slf4j-api:1.7.36")
    implementation("org.slf4j:jcl-over-slf4j:1.7.36")
    implementation("org.slf4j:log4j-over-slf4j:1.7.36")
    implementation("org.apache.logging.log4j:log4j-to-slf4j:2.17.1")
    //implementation("com.google.code.findbugs:jsr305:3.0.2")
    implementation("org.aspectj:aspectjrt:${aspectJVersion}")
    implementation("org.aspectj:aspectjweaver:${aspectJVersion}")

    // https://mvnrepository.com/artifact/org.apache.taglibs/taglibs-standard-spec
    implementation 'org.apache.taglibs:taglibs-standard-spec:1.2.5'
    // https://mvnrepository.com/artifact/org.apache.taglibs/taglibs-standard-impl
    runtimeOnly 'org.apache.taglibs:taglibs-standard-impl:1.2.5'

    implementation("sk.iway:wjdaisydiff:1.1-SNAPSHOT-shaded")
        // https://mvnrepository.com/artifact/org.htmlunit/neko-htmlunit
        implementation 'org.htmlunit:neko-htmlunit:4.5.0'

    providedCompile 'jakarta.servlet:jakarta.servlet-api:6.0.0'
    providedCompile 'jakarta.servlet.jsp:jakarta.servlet.jsp-api:3.1.1'
    providedCompile 'jakarta.el:jakarta.el-api:5.0.1'

    // https://mvnrepository.com/artifact/jakarta.annotation/jakarta.annotation-api
    implementation("jakarta.annotation:jakarta.annotation-api:2.1.1")

    //  https://mvnrepository.com/artifact/org.thymeleaf/thymeleaf-spring5
    implementation group: 'org.thymeleaf', name: 'thymeleaf-spring6', version: '3.1.3.RELEASE'

    // https://mvnrepository.com/artifact/com.googlecode.owasp-java-html-sanitizer/owasp-java-html-sanitizer
    implementation group: 'com.googlecode.owasp-java-html-sanitizer', name: 'owasp-java-html-sanitizer', version: '20240325.1'

    //Java 11/17 - JAXB-API - do not update to v3, packages changed from javax.xml.bind to jakarta.xml.bind
    // https://mvnrepository.com/artifact/com.sun.xml.bind/jaxb-impl
    implementation 'com.sun.xml.bind:jaxb-impl:4.0.5'


    // https://mvnrepository.com/artifact/org.postgresql/postgresql
    runtimeOnly 'org.postgresql:postgresql:42.7.2'

    //UserAgent parser - https://github.com/ua-parser/uap-java
    implementation 'com.github.ua-parser:uap-java:1.6.1'

    testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: '2.7.6'
    testImplementation group: 'org.springframework', name: 'spring-test', version: "${springVersion}"
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.8.2'
    testRuntimeOnly    'org.junit.jupiter:junit-jupiter-engine:5.8.2'
    testImplementation 'org.hamcrest:hamcrest:2.2'
    // https://mvnrepository.com/artifact/org.mockito/mockito-core
    testImplementation 'org.mockito:mockito-core:5.18.0'
    testRuntimeOnly 'org.glassfish:javax.el:3.0.0'
    testImplementation platform("io.qameta.allure:allure-bom:$allureVersion")
    testImplementation "io.qameta.allure:allure-junit5"

    //============ UPDATED VERSIONS BECAUSE OF VULNERABILITIES ==========
    // used in io.springfox:springfox-swagger2
    // https://mvnrepository.com/artifact/io.github.classgraph/classgraph
    implementation 'io.github.classgraph:classgraph:4.8.177'

    // used in com.google.crypto.tink:tink
    // https://mvnrepository.com/artifact/com.google.protobuf/protobuf-java
    implementation 'com.google.protobuf:protobuf-java:3.25.5'

    // used in velocity-tools-generic
    // https://mvnrepository.com/artifact/org.apache.velocity/velocity-engine-core
    implementation 'org.apache.velocity:velocity-engine-core:2.4.1'

    implementation 'cz.gopay:gp-java-api-v3-common:3.8.1'
    implementation 'cz.gopay:gp-java-api-v3-apache-http-client:3.8.1'

    agent "org.aspectj:aspectjweaver:$aspectJVersion"
}

test {
    useJUnitPlatform()
    systemProperty 'sun.net.client.defaultConnectTimeout', '10000'
    systemProperty 'sun.net.client.defaultReadTimeout', '10000'
    systemProperty 'file.encoding', 'UTF-8'
    systemProperty 'user.language', 'sk'
    systemProperty 'user.country', 'SK'
    systemProperty 'webjetDbname', '/poolman-local.xml'
    jvmArgs = [ "-javaagent:${configurations.agent.singleFile}" ]
    testLogging {
        events "passed", "skipped", "failed", "standard_out", "standard_error"
        showStandardStreams = true
    }
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

compileJava {
    options.incremental = true
    options.fork = true
    options.failOnError = true
    options.encoding = "utf-8"
    options.forkOptions.memoryMaximumSize = '1g'
    //options.forkOptions.jvmArgs = ['-XX:MaxPermSize=512m', '-Xms512m', '-Xmx1g']
}

//TASKY
task npmwatch(type:Exec) {
    workingDir 'src/main/webapp/admin/v9/'
    project.ext."npmExe" = Os.isFamily(Os.FAMILY_WINDOWS) ? "npm.cmd" : "npm"
    commandLine project.ext.'npmExe', 'run', 'watch'
}

task npmbuild(type:Exec) {
    workingDir 'src/main/webapp/admin/v9/'
    project.ext."npmExe" = Os.isFamily(Os.FAMILY_WINDOWS) ? "npm.cmd" : "npm"
    commandLine project.ext.'npmExe', 'run', 'prod'
}

task npminstall {
    doLast {
        exec {
            workingDir 'src/main/webapp/admin/v9/'
            project.ext."npmExe" = Os.isFamily(Os.FAMILY_WINDOWS) ? "npm.cmd" : "npm"
            commandLine project.ext.'npmExe', 'install'
        }
    }
}

//dependency check - https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
dependencyCheck {
    scanConfigurations=["runtimeClasspath"]
    //format see https://gist.github.com/milo-minderbinder/1e1ed911c5b2264dc659578f1baaef16
    suppressionFiles=[
        file(new File(project.rootDir, 'dependency-check-suppressions.xml')),
        file(new File(project.rootDir, 'dependency-check-suppressions-project.xml'))
    ]
    analyzers {
        assemblyEnabled=false
        nodeEnabled=false
        nodeAudit {
            yarnEnabled=false
            skipDevDependencies=true
            pnpmEnabled=false
        }
        ossIndex {
            //OSS Index authentication is now required: https://ossindex.sonatype.org/doc/auth-required
            username=System.getenv('OSSINDEX_USERNAME') ?: ''
            password=System.getenv('OSSINDEX_TOKEN') ?: ''
        }
    }
    nvd {
        //api key for NVD database for dependency check
        apiKey=System.getenv('NVD_API_KEY') ?: ''
        maxRetryCount=20
        delay=8000
    }
}

licenseReport {
    filters = [new LicenseBundleNormalizer(bundlePath: "$projectDir/licensereport-normalization.json")]
    allowedLicensesFile = new File("$projectDir/licensereport-allowed.json")
    renderers = [new InventoryHtmlReportRenderer()]
}

jacoco {
    //set latest version
    toolVersion = "+"
}

gretty {
    // supported values:
    // 'jetty7', 'jetty8', 'jetty9', 'jetty9.3', 'jetty9.4', 'tomcat7', 'tomcat8'
    servletContainer = 'tomcat10'
    contextPath = ''
    httpPort = 80
    httpsEnabled = true
    httpsPort = 443
    //hard mod spusti WJ rovno z src/main/webapp co zrychli start (netreba kopirovat JSP subory niekde inde)
    inplaceMode = 'hard'
    //scanovania pre hotswap
    scanInterval = 0
    scanner = 'jetty'
    scanDir "${projectDir}/build/classes/java/main"
    fastReload = true
    //managedClassReload = true - nie je mozne pouzit s Java > 8
    //chceme aby sa tomcat nereloadol po zmene triedy, v IDE je potrebne kliknut na Hot Code Replace pre aplikovanie zmeny v triede
    reloadOnClassChange = false
    debugSuspend = false

    //extraResourceBase 'src/webjet8/webapp'

    //JVM parametre
    jvmArgs = [
        //odporucane premenne pre Tomcat
        '-Dsun.net.client.defaultConnectTimeout=300000',
        '-Dsun.net.client.defaultReadTimeout=300000',
        '-Dfile.encoding=utf-8',
        '-Duser.language=sk',
        '-Duser.country=SK',
        //povolenie remote debug na porte 5005
        '-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=5005',
        //lokalny poolman-local.xml subor
        //'-DwebjetPoolmanPath=/poolman-local.xml',
        //Uprava konfiguracie pre WebJET, tymto sa prepisuju hodnoty z databazy v Ovladaci panel->Konfiguracia
        //'-Dwebjet.useSMTPServer=true',
        '-Dwebjet.smtpServer=mxrelay.dev.iway.sk',
        "-DwebjetDbname=${System.env.webjetDbname}",
        '-Dwebjet.serverMonitoringEnableJPA=true',
        '-Dwebjet.webEnableIPs=1,2,3,4,5,6,7,8,9,0',
        '-Dwebjet.adminEnableIPs=1,2,3,4,5,6,7,8,9,0',
        '-Dwebjet.cloudStaticFilesDir=-',
        '-Dwebjet.passwordAdminExpiryDays=0',
        '-Dwebjet.loggerUseAnsiColors=true'
    ]

    //enable jacoco also for appStart and appStartDebug tasks
    afterEvaluate {
        tasks.appStart {
            file("${rootDir}/build/jacoco/appStart.exec").delete()
            jacoco {
                enabled = true
            }
            finalizedBy tasks.generateJacocoReport
        }
        tasks.appStartDebug {
            file("${rootDir}/build/jacoco/appStartDebug.exec").delete()
            jacoco {
                //enabled = true
            }
            //finalizedBy tasks.generateJacocoReport
        }
        tasks.appAfterIntegrationTest {
            finalizedBy tasks.generateJacocoReport
        }
    }
}

//generate HTML report from jacoco.exec files
task('generateJacocoReport', type: JacocoReport) {

  executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

  sourceDirectories.setFrom project.files(project.sourceSets.main.allSource.srcDirs)
  classDirectories.setFrom project.sourceSets.main.output

  def reportDir = project.reporting.file("${rootDir}/build/jacoco/report")
  def reportFileXml = project.reporting.file("${rootDir}/build/jacoco/report/cov.xml")
  reports {
    xml.required = true
    xml.outputLocation = reportFileXml
    csv.required = true
    html.outputLocation = reportDir
  }
  doLast {
    System.out.println "Jacoco report for server created: file://${reportDir.toURI().path}index.html"
  }
}

//generovanie javadoc dokumentacie
//generovat pocas buildu, aby sa dali generovat aj triedy, ktore tu nemame, napr. Constants
javadoc {
  failOnError = false
  title = "WebJET CMS"
  destinationDir = file('docs/javadoc')
  options.addStringOption('Xdoclint:none', '-quiet')
  options.addStringOption('Xmaxerrs', '65536')
  options.addStringOption('Xmaxwarns', '65536')
  include (
        'sk/iway/iwcm/'
  )
  exclude (
    '/de/innosystec/unrar/unpack/ComprDataIO.java',
    'sun/reflect/generics/',
    'sk/iway/iwcm/common/FileIndexerTools.java'
  )
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId = System.getProperty("wjgroup")
            artifactId = System.getProperty("wjname")
            version = System.getProperty("wjversion")

            pom {
                name = 'webjet'
                description = 'WebJET CMS - Web Content Management in Java/Spring'
                url = 'https://www.webjetcms.com'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        name = 'Lubos Balat'
                        email = 'info@webjet.eu'
                        organization = 'InterWay, a. s.'
                        organizationUrl = 'https://www.interway.sk'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/webjetcms/webjetcms.git'
                    developerConnection = 'scm:git:ssh://github.com:/webjetcms/webjetcms.git'
                    url = 'https://github.com/webjetcms/webjetcms/tree/master'
                }
            }

            from components.java
        }
    }
}

//vygeneruje POM subor pre maven deployment
task writePom() {

    dependsOn tasks.withType(GenerateMavenPom)

    //vrati zo zadanych 2 cisel verzii najnovsiu verziu (napr. 1.11.1034,1.12.276=>1.12.276)
    ext.mostRecentVersion = { List versions ->
        def sorted = versions.sort(false) { a, b ->

            List verA = a.tokenize('.')
            List verB = b.tokenize('.')

            def commonIndices = Math.min(verA.size(), verB.size())

            for (int i = 0; i < commonIndices; ++i) {
                if (verA[i].equals("+")) verA[i] = "0"
                if (verB[i].equals("+")) verB[i] = "0"
                def numA = 0;
                try { numA = verA[i].replace("-SNAPSHOT", "").replace("-RC", "").toInteger(); } catch (Exception ex) {}
                def numB = 0;
                try { numB = verB[i].replace("-SNAPSHOT", "").replace("-RC", "").toInteger(); } catch (Exception ex) {}

                if (numA != numB) {
                    return numA <=> numB
                }
            }

            // If we got this far then all the common indices are identical, so whichever version is longer must be more recent
            verA.size() <=> verB.size()
        }

        //println "sorted versions: $sorted"
        sorted[-1]
    }

    doLast {
        //generate pom file
        def wjversion = System.getProperty("wjversion");
        if (wjversion == null) wjversion = "unknown"

        /*pom {
            project {
                groupId 'sk.iway'
                artifactId 'webjet'
                version wjversion
                name 'webjet'
            }
        }.writeTo("build/pom.xml")*/

        // Get existing pom file
        Node xml = new XmlParser().parse("build/publications/maven/pom-default.xml")
        //verziu je mozne zadat v gradle ako 5.3.+, do POM to potrebujeme resolvnut na konkretnu verziu 5.3.22
        Map resolvedVersionMap = new HashMap()
        Set<ResolvedArtifact> resolvedArtifacts = configurations.runtimeClasspath.getResolvedConfiguration().getResolvedArtifacts()
        //resolvedArtifacts.addAll(configurations.testImplementation.getResolvedConfiguration().getResolvedArtifacts())
        resolvedArtifacts.each {
            def version = it.getModuleVersion().getId().getVersion();
            def currentVersion = resolvedVersionMap.get(it.getName());
            def mostRecent = version;
            if (currentVersion != null) mostRecent = mostRecentVersion([currentVersion, version]);

            println("resolvedVersion: name="+it.getName()+" versionFull="+it.getModuleVersion()+" version="+version+" currentVersion="+currentVersion+" mostRecent="+mostRecent)
            resolvedVersionMap.put(it.getName(), mostRecent);
        }

        // Update dependencies with resolved versions
        Node dependencies = xml.dependencies.first();
        Iterator<Node> i = dependencies.iterator();
        while (i.hasNext()) {
            it = i.next()
            Node artifactId = it.get("artifactId").first()
            def groupId = it.get("groupId").first().value().first()
            def artifactName = artifactId.value().first()
            def version = it.get("version").first().value().first()
            //println "Checking: groupId: "+groupId+" artifactId:"+artifactName+" version="+version+" scope="+it.get("scope")

            def artifactVersion = resolvedVersionMap.get(artifactName)
            Node versionNode = it.get("version").first()
            if (artifactVersion!=null) {
                def mostRecent = mostRecentVersion([artifactVersion, version]);
                //println "artifact version=" + artifactVersion + " mostRecent=" + mostRecent
                if (mostRecent.equals(version)==false) {
                    println "---> changing version: " + version + "->" + artifactVersion + " mostRecent=" + mostRecent
                    versionNode.value = mostRecent
                }
            }

            //zmaz exclusions, to tam fakt nepotrebujeme
            it.remove(it.get("exclusions"))

            //zmen scope z runtime na compile
            Node scope = it.get("scope").first()
            def scopeValue = scope.value().first()
            //println "groupId: "+groupId+" artifactId:"+artifactName+" version="+version+" scope="+scopeValue
            if ("runtime".equals(scopeValue)) scope.value = "compile";

            if (artifactName.endsWith("servlet-api") || artifactName.endsWith(".jsp-api") || artifactName.endsWith(".el-api") || "jsr250-api".equals(artifactName)) scope.value = "provided";

            if ("test".equals(scopeValue) || "8.9-SNAPSHOT-wj9".equals(version)) {
                println "----> removing: "+artifactName
                i.remove();
            }

            //remove sk.iway artifacts, they are packages to webjet-VERSION-libs.jar
            if (groupId.startsWith("sk.iway") && "pd4ml".equals(artifactName)==false) {
                println "----> removing: "+artifactName
                i.remove();
            }

            //remove stripes, it is integrated with our changes in libs jar
            if ("stripes".equals(artifactName)) {
                println "----> removing: "+artifactName
                i.remove();
            }
        }

        // zapis pom subor
        def printWriter = new PrintWriter(new FileWriter("build/updatezip/artifacts/webjetcms-"+wjversion+".pom"));
        printWriter.println('<?xml version="1.0" encoding="UTF-8"?>');
        XmlNodePrinter xmlNodePrinter = new XmlNodePrinter(printWriter)
        xmlNodePrinter.with {
            preserveWhitespace = true
            expandEmptyElements = true
        }
        xmlNodePrinter.print(xml)

        delete files("build/pom.xml")
    }
}

tasks.withType(JavaCompile) {
    options.failOnError = false
    //prevent warning messages during compile
    options.compilerArgs += ['-Xlint:none']
    //needed for Spring
    options.compilerArgs += ['-parameters']
}