package sk.iway.iwcm.components.ai.rest;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.nio.file.DirectoryStream;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Base64;
import java.util.Date;

import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.stereotype.Service;

import sk.iway.iwcm.Constants;
import sk.iway.iwcm.DB;
import sk.iway.iwcm.FileTools;
import sk.iway.iwcm.Identity;
import sk.iway.iwcm.Tools;
import sk.iway.iwcm.common.DocTools;
import sk.iway.iwcm.common.ImageTools;
import sk.iway.iwcm.common.UploadFileTools;
import sk.iway.iwcm.i18n.Prop;
import sk.iway.iwcm.io.IwcmFile;
import sk.iway.iwcm.io.IwcmFsDB;
import sk.iway.iwcm.io.IwcmInputStream;
import sk.iway.iwcm.io.IwcmOutputStream;
import sk.iway.iwcm.users.UsersDB;

/**
 * Handles temporary storage of files (mainly images) generated by AI assistants.
 * Files are stored in /WEB-INF/tmp/ai_files and can be later moved to final
 * location by user.
 */
@Service
public class AiTempFileStorage {

    private static final String NOT_FOUND_ERR = "components.file_archiv.file_not_found";

    private AiTempFileStorage() {
        // Intentionally left empty to prevent instantiation
    }

    public static final String AI_FILE_DIR = "/WEB-INF/tmp/ai_files";

    public static Path getFileFolder() throws IOException {
        String filePath = Tools.getRealPath(AI_FILE_DIR);
        Path tempDir = Paths.get(filePath);

        if (Files.notExists(tempDir)) {
            Files.createDirectories(tempDir);
        }

        if(Files.isDirectory(tempDir) == false) throw new IOException("Tempfile folder is not a folder");

        return tempDir;
    }

    public static String addImage(String base64, String fileName, String fileFormat) throws IOException {
        return addImage(base64, fileName, fileFormat, getFileFolder());
    }

    public static String addImage(String base64, String fileName, String fileFormat, Path fileFolder) throws IOException {
        IwcmFile tempUploadFile = new IwcmFile( File.createTempFile(fileName, fileFormat, fileFolder.toFile()) );

        byte[] imageBytes = Base64.getDecoder().decode(base64);
        try (IwcmOutputStream out = new IwcmOutputStream(tempUploadFile)) {
            out.write(imageBytes);
        }

        return tempUploadFile.getName();
    }

    public static void downloadFile(String fileName, HttpServletRequest request, HttpServletResponse response) throws IOException {
        Path tempFileFolder = getFileFolder();
        Path tempFilePath = tempFileFolder.resolve(fileName);

        Prop prop = Prop.getInstance(request);

        if (Files.notExists(tempFilePath)) {
            throw new IOException(prop.getText(NOT_FOUND_ERR));
        }

        String filePath = tempFilePath.toAbsolutePath().toString();

        ServletOutputStream out = response.getOutputStream();
        //citaj subor a posielaj na vystup
        byte[] buff = new byte[8000];
        IwcmInputStream fis = new IwcmInputStream(filePath);
        int len;

        String mimeType = "application/octet-stream";
        try {
	    	mimeType = Constants.getServletContext().getMimeType(filePath.toLowerCase());
        } catch (Exception ex) {
	    	sk.iway.iwcm.Logger.error(ex);
        }

        if (Tools.isEmpty(mimeType)) mimeType = "application/octet-stream";

        response.setContentType(mimeType);

        while ((len = fis.read(buff)) != -1) out.write(buff, 0, len);

        fis.close();
        out.flush();
        out.close();
    }

    public static String saveTempFile(String tempFileName, String fileName, String destinationFolder, HttpServletRequest request) throws IOException, IllegalStateException {
        Prop prop = Prop.getInstance(request);

        if(Tools.isEmpty(tempFileName)) throw new IOException(prop.getText(NOT_FOUND_ERR));
        if(Tools.isEmpty(fileName)) throw new IllegalStateException(prop.getText("components.ai_assistants.temp_file_storage.file_name_empty_err"));
        if(Tools.isEmpty(destinationFolder)) throw new IllegalStateException(prop.getText("components.ai_assistants.temp_file_storage.file_location_empty_err"));

        fileName = DB.internationalToEnglish(fileName);
        fileName = DocTools.removeChars(fileName, true).toLowerCase();

        if (destinationFolder.startsWith("/images") || destinationFolder.startsWith("/files") || destinationFolder.startsWith("/shared")) {
            //pre bezpecnost povolujeme len tieto priecinky na upload, kedze ten sa definuje cez parameter destinationFolder
        } else {
            throw new IllegalStateException(prop.getText("admin.upload_iframe.wrong_upload_dir"));
        }

        Identity user = UsersDB.getCurrentUser(request);
        if (user == null || user.isFolderWritable(destinationFolder)==false) {
            // /files/protected/feedback-form/ je natvrdo povolene, aby bolo mozne nahrat subory k feedback-form
            throw new IllegalStateException(prop.getText("admin.upload_iframe.wrong_upload_dir"));
        }

        Path tempFileFolder = getFileFolder();
        Path tempFilePath = tempFileFolder.resolve(tempFileName);

        String tempFileExt = FileTools.getFileExtension(tempFileName);
        String fileNameExt = FileTools.getFileExtension(fileName);
        fileName = FileTools.getFileNameWithoutExtension(fileName);
        if (("jpg".equals(fileNameExt) || "jpeg".equals(fileNameExt)) && "png".equals(tempFileExt)) {
            //convert tempFile from png to jpg
            String convertedImageName = ImageTools.convertImageFormat(new IwcmFile(tempFilePath.toFile()), fileNameExt);
            if (convertedImageName != null) {
                tempFileName = convertedImageName;
                tempFileExt = fileNameExt;
                tempFilePath = tempFileFolder.resolve(tempFileName);
            }
        }

        if (Files.notExists(tempFilePath))
            throw new IOException(prop.getText(NOT_FOUND_ERR));

        if(Files.isDirectory(tempFilePath))
            throw new IOException(prop.getText(NOT_FOUND_ERR));

        IwcmFile tempFile = new IwcmFile( tempFilePath.toFile() );
        InputStream tempFileIS = new IwcmInputStream(tempFile);

        String path = destinationFolder;
        if(destinationFolder.endsWith("/") == false) path += "/";

        String newFileUrl = path + fileName + "." + tempFileExt;
        IwcmFile newRealFile = new IwcmFile( Tools.getRealPath(newFileUrl) );

        IwcmFsDB.writeFiletoDest(tempFileIS, new File(newRealFile.getAbsolutePath()), Tools.safeLongToInt(tempFile.getLength()));

        String prefix = tempFileName.substring(0, tempFileName.lastIndexOf('_') + 1);

        //After success remove all temp files with same prefix
        try (DirectoryStream<Path> stream = Files.newDirectoryStream(tempFileFolder)) {
            for (Path child : stream) {
                if(child.getFileName().toString().startsWith(prefix)) {
                    Files.delete(child);
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }

        //handle gallery
        UploadFileTools.handleGallery(newRealFile, new Date());

        return newFileUrl;
    }
}
