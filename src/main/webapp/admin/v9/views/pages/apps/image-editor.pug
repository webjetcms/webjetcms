extends ../../partials/iframe

block content

    include ../../partials/datatables-upload

    table.datatableInit.table(id="galleryTable")

    script.
        var galleryTable = null;
        var url = "/admin/rest/components/gallery";
        var columns = [(${layout.getDataTableColumns('sk.iway.iwcm.components.gallery.GalleryEntity')})];

        const queryString = window.location.search;
        const urlParams = new URLSearchParams(queryString);

        var imagePath = urlParams.get('dir');
        var imageName = urlParams.get('name');

        var adminUpload = null;

        url = url + "?dir=" + imagePath + "&name=" + imageName + "&isImageEditor=true";

        let imageEditorInstance = null;

        var tabs = [
            { id: 'description', title: '[[\#{components.catalog.desc}]]', selected: true },
            { id: 'metadata', title: '[[\#{gallery.admin.metadata.title}]]', selected: false },
            {
                id: 'photoeditor',
                title: '[[\#{admin.editor.title}]]',
                selected: false,
                content: '<div id="photoEditorContainer" class="dte-tab-autoheight"></div>'
            },
            {
                id: 'areaOfInterest',
                title: '[[\#{components.gallery.areaOfInterest}]]',
                selected: false,
                content: '<div class="dte-tab-autoheight" style="overflow:scroll;"><div id="cropper-app"><webjet-cropper-component ref="vueCropper"></webjet-cropper-component></div></div>'
            }
        ];


        var customInitialData = dtWJ.getEmptyData(true);

        let perexGroupsOptions = [(${perexGroupsOptions})];
        customInitialData.options = {
            "editorFields.perexGroupsIds": perexGroupsOptions
        }

        if (window.perexGroupsRenderAsSelect===true) {
            window.WJ.DataTable.mergeColumns(columns, {
                name: "editorFields.perexGroupsIds",
                renderFormat: "dt-format-text",
                "editor" : {
                    type : "select",
                    multiple: true,
                    attr: {
                        "data-multiple-separator": "\x0a\x0d"
                    }
                }
            });
        }

        //do not update ID param in URL, because F5 will not work anymore
        window.dtOpenerDoNotUpdateQuery = true;

        window.domReady.add(function () {
            galleryTable = WJ.DataTable( {
                url: url,
                serverSide: true,
                columns: columns,
                id: "galleryTable",
                tabs: tabs,
                fetchOnCreate: true,
                fetchOnEdit: true,
                idAutoOpener: true,
                initialData: customInitialData,
                onPreXhr: function(TABLE, e, settings, data) {
                    data.fixed_searchImagePath = imagePath;
                    data.fixed_searchImageName = imageName;
                },
                createButtons: [
                    {
                        text: '<i class="ti ti-check"></i> ' + WJ.translate('button.save'),
                        action: function() {
                            //action musime zachovat, lebo to editor pri ulozeni zmaze
                            let editorAction = this.s.action;
                            //console.log("editorAction=", editorAction);
                            let editor = this;
                            this.submit(
                                function() {
                                    editor.s.action = editorAction;
                                },
                                null,
                                null,
                                false
                            );
                        }
                    }
                ],
                updateEditorAfterSave: true,
                hideTable: true,
            });

            //They are not visible but to be sure
            galleryTable.hideButton("create");
            galleryTable.hideButton("edit");
            galleryTable.hideButton("remove");
            galleryTable.hideButton("import");
            galleryTable.hideButton("export");

            //Hide fields in interest tab
            galleryTable.EDITOR.field('selectedHeight').hide();
            galleryTable.EDITOR.field('selectedY').hide();
            galleryTable.EDITOR.field('selectedX').hide();
            galleryTable.EDITOR.field('selectedWidth').hide();

            galleryTable.EDITOR.on('open', function (e, type, action) {
                if (imagePath.indexOf("://")>=0) {
                    WJ.notifyError("[[\#{components.chat.error}]]", "[[\#{image_editor.imageIsOnRemoteServer}]]");
                    $(".DTE_Footer .btn-primary").hide();
                }

                $("div.modal.DTED > div.modal-dialog").addClass("modal-xl");
                //console.log("Reseting imageEditorInstance");
                //zresetuj image editor instance
                if (imageEditorInstance != null) imageEditorInstance.resetData();
            });

            adminUpload = window.AdminUpload({
                element: "#dt-upload",
                uploadType: "image",
                acceptedFiles: ".jpg,.jpeg,.mp4,.gif,.png",
                destinationFolder: imagePath,
                writeDirectlyToDestination: true
            });

            galleryTable.EDITOR.on('submitSuccess', function (e, json, data, action) {
                if (imageEditorInstance != null) {
                    $("#galleryTable_modal").removeClass("show");
                    $(".modal-backdrop.show").removeClass("show");
                    //$(".DTE_Footer").hide();

                    imageEditorInstance.onPostEditedImage('/admin/upload/chunk');
                }
                //try to reload elfinder on opener window
                try {
                    //console.log("Reloading elfinder");
                    setTimeout(() => {
                        window.opener.elFinderInstance.exec('reload');
                    }, 1000);
                    window.opener.elFinderInstance.exec('reload');
                } catch (e) {console.log("Error reloading elfinder", e);}

                if (imageEditorInstance == null) {
                    setTimeout(() => {
                        window.close();
                    }, 1200);
                }
            });

            $("#upload-wrapper .upload-wrapper-header").text(WJ.translate("components.image_editor.saving.js"));
        });

        function getCropValues() {
            let imageEditorRatio = "[(${layout.getConstant('imageEditorRatio')})]";
            // safe check
            if(imageEditorRatio == null || imageEditorRatio.length < 1) return [""];
            // trim
            imageEditorRatio = imageEditorRatio.replace(/\s+|\s+/gm,'');
            // replace : with -
            imageEditorRatio = imageEditorRatio.replace(/:/g, '-');
            // split
            return imageEditorRatio.split(",");
        }

        function getResizeValues() {
            let imageEditorSizeTemplates = "[(${layout.getConstant('imageEditorSizeTemplates')})]";
            // safe check
            if(imageEditorSizeTemplates == null || imageEditorSizeTemplates.length < 1) return [""];
            // trim
            imageEditorSizeTemplates = imageEditorSizeTemplates.replace(/\s+|\s+/gm,'');
            // split
            return imageEditorSizeTemplates.split(";");
        }

        function resizeImageEditor() {
            //console.log("resizeImageEditor");
            var height = $(window).height()-$("#galleryTable_modal div.modal-header").outerHeight()-$("#galleryTable_modal div.modal-footer").outerHeight()+"px";
            if (imageEditorInstance != null) {
                $("#photoEditorContainer").css("height", height);
            }
        }

        const initializeImageEditor = event => {
            //dynamicky vytvaram image editor
            //TODO: upravit aby sa neinicializoval zakazdym, ale len prepouzil
            imageEditor().then(module => {
                let now = (new Date()).getTime();
                const options = {
                    includeUI: {
                        cropBonusValues: getCropValues(),
                        resizePresetDimensions: getResizeValues(),
                        menuBarPosition: 'left',
                        loadImage: {
                            path: `${imagePath}/${imageName}?v=${now}`,
                            name: imageName,
                        },
                        menu: ['resize', 'crop', 'flip', 'rotate', 'draw', 'shape', 'icon', 'text', 'mask', 'filter'],
                        locale: {
                            'Resize': '[[\#{image_editor.resize}]]',
                            'Width': '[[\#{image_editor.width}]]',
                            'Height': '[[\#{image_editor.height}]]',
                            'Lock Aspect Ratio': '[[\#{image_editor.constrain_proportions}]]',
                            'presetDimensionNoneOption': '[[\#{components.gallery.tui-image-editor.presetDimensionNoneOption}]]',
                            'Preset Dimensions': '[[\#{components.gallery.tui-image-editor.presetDimensions}]]',
                            'Crop': '[[\#{components.gallery.tui-image-editor.Crop}]]',
                            'Invert': '[[\#{components.gallery.tui-image-editor.Invert}]]',
                            'Remove White': '[[\#{components.gallery.tui-image-editor.Remove_White}]]',
                            'Color Filter': '[[\#{components.gallery.tui-image-editor.Color_Filter}]]',
                            'DeleteAll': '[[\#{components.gallery.tui-image-editor.DeleteAll}]]',
                            'Rotate': '[[\#{components.gallery.tui-image-editor.Rotate}]]',
                            'Undo': '[[\#{components.gallery.tui-image-editor.Undo}]]',
                            'Redo': '[[\#{components.gallery.tui-image-editor.Redo}]]',
                            'Reset': '[[\#{components.gallery.tui-image-editor.Reset}]]',
                            'Delete': '[[\#{components.gallery.tui-image-editor.Delete}]]',
                            'Flip': '[[\#{components.gallery.tui-image-editor.Flip}]]',
                            'Flip X': '[[\#{components.gallery.tui-image-editor.Flip_X}]]',
                            'Flip Y': '[[\#{components.gallery.tui-image-editor.Flip_Y}]]',
                            'Range': '[[\#{components.gallery.tui-image-editor.Range}]]',
                            'Free': '[[\#{components.gallery.tui-image-editor.Free}]]',
                            'Load Mask Image': '[[\#{components.gallery.tui-image-editor.Load_Mask_Image}]]',
                            'Left': '[[\#{components.gallery.tui-image-editor.Left}]]',
                            'Text size': '[[\#{components.gallery.tui-image-editor.Text_size}]]',
                            'Custom icon': '[[\#{components.gallery.tui-image-editor.Custom_icon}]]',
                            'Rectangle': '[[\#{components.gallery.tui-image-editor.Rectangle}]]',
                            'Circle': '[[\#{components.gallery.tui-image-editor.Circle}]]',
                            'Triangle': '[[\#{components.gallery.tui-image-editor.Triangle}]]',
                            'Fill': '[[\#{components.gallery.tui-image-editor.Fill}]]',
                            'Stroke': '[[\#{components.gallery.tui-image-editor.Stroke}]]',
                            'Center': '[[\#{components.gallery.tui-image-editor.Center}]]',
                            'Right': '[[\#{components.gallery.tui-image-editor.Right}]]',
                            'Underline': '[[\#{components.gallery.tui-image-editor.Underline}]]',
                            'Bold': '[[\#{components.gallery.tui-image-editor.Bold}]]',
                            'Italic': '[[\#{components.gallery.tui-image-editor.Italic}]]',
                            'Straight': '[[\#{components.gallery.tui-image-editor.Straight}]]',
                            'Color': '[[\#{components.gallery.tui-image-editor.Color}]]',
                            'Draw': '[[\#{components.gallery.tui-image-editor.Draw}]]',
                            'Shape': '[[\#{components.gallery.tui-image-editor.Shape}]]',
                            'Icon': '[[\#{components.gallery.tui-image-editor.Icon}]]',
                            'Mask': '[[\#{components.gallery.tui-image-editor.Mask}]]',
                            'Apply': '[[\#{components.gallery.tui-image-editor.Apply}]]',
                            'Cancel': '[[\#{components.gallery.tui-image-editor.Cancel}]]',
                            'Custom': '[[\#{components.gallery.tui-image-editor.Custom}]]',
                            'Square': '[[\#{components.gallery.tui-image-editor.Square}]]',
                            'Grayscale': '[[\#{components.gallery.tui-image-editor.Grayscale}]]',
                            'Brightness': '[[\#{components.gallery.tui-image-editor.Brightness}]]',
                            'Pixelate': '[[\#{components.gallery.tui-image-editor.Pixelate}]]',
                            'Tint': '[[\#{components.gallery.tui-image-editor.Tint}]]',
                            'Multiply': '[[\#{components.gallery.tui-image-editor.Multiply}]]',
                            'Blend': '[[\#{components.gallery.tui-image-editor.Blend}]]',
                            'Emboss': '[[\#{components.gallery.tui-image-editor.Emboss}]]',
                            'Sepia': '[[\#{components.gallery.tui-image-editor.Sepia}]]',
                            'Sepia2': '[[\#{components.gallery.tui-image-editor.Sepia2}]]',
                            'Blur': '[[\#{components.gallery.tui-image-editor.Blur}]]',
                            'Sharpen': '[[\#{components.gallery.tui-image-editor.Sharpen}]]',
                            'Noise': '[[\#{components.gallery.tui-image-editor.Noise}]]',
                            'Distance': '[[\#{components.gallery.tui-image-editor.Distance}]]',
                            'Threshold': '[[\#{components.gallery.tui-image-editor.Threshold}]]',
                            'Arrow': '[[\#{components.gallery.tui-image-editor.Arrow}]]',
                            'Arrow-2': '[[\#{components.gallery.tui-image-editor.Arrow}]]',
                            'Arrow-3': '[[\#{components.gallery.tui-image-editor.Arrow}]]',
                            'Star-1': '[[\#{components.gallery.tui-image-editor.Star-1}]]',
                            'Star-2': '[[\#{components.gallery.tui-image-editor.Star-2}]]',
                            'Polygon': '[[\#{components.gallery.tui-image-editor.Polygon}]]',
                            'Location': '[[\#{components.gallery.tui-image-editor.Location}]]',
                            'Heart': '[[\#{components.gallery.tui-image-editor.Heart}]]',
                            'Bubble': '[[\#{components.gallery.tui-image-editor.Bubble}]]',
                            'Double Click': '[[\#{components.gallery.tui-image-editor.DoubleClick}]]',
                        },
                        theme: {
                            'common.bisize.width': '251px',
                            'common.bisize.height': '40px',
                            'common.backgroundColor': '#fff',
                        },
                        uiSize: {
                            width: '100%',
                            height: galleryTable.EDITOR.editorHeightLatest+'px'
                        }
                    },
                    cssMaxWidth: $(window).width() - 360,
                    //64 je vyska spodnej nastrojovej listy
                    cssMaxHeight: galleryTable.EDITOR.editorHeightLatest,
                    usageStatistics: false

                }
                imageEditorInstance = new module.ImageEditor(document.querySelector("#photoEditorContainer"), options);
                // console.log("ImageEditor initialized");
                setTimeout(() => {
                    resizeImageEditor();
                }, 1000);
            });
        };

        /* counter - kontrolujem ci bola vytvorena vue instance */
        let counter = 0;
        let cropperVm = null;
        const createVueInstance = () => {
            return window.VueTools.createApp({
                components: {
                    'webjet-cropper-component': window.VueTools.getComponent('webjet-cropper-component')
                },
                methods: {
                    refresh() {
                        this.$refs.vueCropper.refresh();
                    },
                    resize() {
                        this.$refs.vueCropper.resetVisibleArea();
                    }
                }
            }).mount('#cropper-app');
        }

        const initializeAreaOfInterest = () => {
            counter += 1;
            if (counter <= 1) {
                cropperVm = createVueInstance();
                //window.crop = cropperVm;
            } else {
                /* pokial je uz vytvorena len refreshujem, nevytvaram nove vue */
                cropperVm.refresh();
            }
            window.addEventListener('WJ.DTE.closeclick', () => {
                cropperVm.$refs.vueCropper.imageIsReady = false;
            }, false);
        }

        window.addEventListener('WJ.DTE.tabclick', function (e) {
            //console.log("tabclick, id=", e.detail.id, " e=", e);
            if (e.detail.id === 'galleryTable-areaOfInterest') initializeAreaOfInterest(e);
            if (e.detail.id === 'galleryTable-photoeditor') {
                if(imageEditorInstance === null || imageEditorInstance === undefined) {
                    initializeImageEditor(e);
                } else {
                     let now = (new Date()).getTime();
                     imageEditorInstance.loadImageFromURL(
                            `${imagePath}/${imageName}?v=${now}`,
                            $("#DTE_Field_imageName").val(),
                     ).then(()=> {
                            imageEditorInstance.clearUndoStack();
                    });
                };
            }
        }, false);

        window.addEventListener('WJ.DTE.resize', function (e) {
            if (cropperVm != null) {
                cropperVm.resize();
            }
            if (imageEditorInstance != null) {
                imageEditorInstance.resizeCanvasDimension({
                    width: $("#galleryTable_modal div.DTE").width(),
                    height: galleryTable.EDITOR.editorHeightLatest-64-6
                });
            }
        });

        window.addEventListener('resize', function (e) {
            resizeImageEditor();
        }, true);

        window.addEventListener('WJ.DTE.closeclick', () => {
            window.close();
        });

        window.addEventListener("WJ.imageEditor.upload.success", function (e) {

            //update image in ckeditor
            try {
                let selectedImages = window.opener.$(".cke_wysiwyg_frame").contents()[0].getElementsByClassName("cke_floatingtools_selected");
                //src is in form /images/apps/apps-monitor.jpg?v=1733922954 we need to update v to current time and reload image
                for (let i = 0; i < selectedImages.length; i++) {
                    let img = selectedImages[i];
                    let src = img.getAttribute("src");
                    let v = (new Date()).getTime();
                    let newUrl = WJ.urlUpdateParam(src, "v", v);
                    img.setAttribute("src", newUrl);
                    img.setAttribute("data-cke-saved-src", newUrl);
                }
            } catch (e) {}

            setTimeout(() => {
                window.close();
            }, 1000);
        });