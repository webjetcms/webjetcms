extends ../../partials/iframe

block content

    style.
        .modal-header {
            margin-top: 6px !important;
            border-top-width: 0px !important;
            padding-right: 0px !important;
        }
        .modal.DTED .modal-header .DTE_Header_Content .row .col-sm-4 {
            width: 33.33333333% !important;
        }
        div.DTE_Action_Edit div.DTE_Footer {
            display: none;
        }

    script.
        let componentDatatable = null,
            componentClass,
            componentPath = null,
            componentColumns = null;

        //WJ.debugTimer(true);
        WJ.debugTimer("component.pug");

        window.domReady.add(function () {
            var componentJson = [(${componentJson})];
            var requestJson = [(${requestJson})];
            var requestJsonTest = [(${requestJsonTest})];
            //console.log("componentJson=", componentJson, "requestJson=", requestJson, "requestJsonTest=", requestJsonTest);

            if (componentJson == null || requestJson == null) {
                return;
            }

            componentClass = requestJson.className;
            let parameters = requestJson.parameters;
            let docId = requestJson.docId;
            let groupId = requestJson.groupId;
            let title = requestJson.pageTitle;
            let originalComponentName = requestJson.originalComponentName;
            let originalJspFileName = requestJson.originalJspFileName;

            componentPath = componentClass;

            //console.log("PUG docId=", docId, "groupId=", groupId, "title=", title, "componentPath=", componentPath, "originalComponentName=", originalComponentName, "originalJspFileName=", originalJspFileName);

            if (componentClass === '') {
                return;
            }

            //console.log("parameters=", parameters);

            let data = {
                    className: componentClass,
                    parameters: parameters,
                    docId: docId,
                    groupId: groupId,
                    pageTitle: title
            };

            if (typeof window.appBeforeXhr === "function") {
                window.appBeforeXhr(data);
            }

            WJ.debugTimer("has data");

            if (componentJson != null) {
                createDatatable(componentJson);
            }
            //WJ.debugTimer("end");
        });

        function createDatatable(response) {
            //console.log("success, response=", response);
            if (typeof response.error !== 'undefined') {
                WJ.notifyError(response.error);
                return;
            }

            if (typeof window.appAfterXhr === "function") {
                window.appAfterXhr(response);
            }

            componentColumns = response.columns;

            componentColumns.push({
                "data" : "id",
                "name" : "id",
                "title" : "ID",
                "defaultContent" : "",
                "className" : "dt-select-td cell-not-editable",
                "renderFormat" : "dt-format-selector",
                "editor" : {
                    "type" : "hidden",
                    "required" : false
                },
                "sortAfter" : "",
                "perms" : "",
                "array" : false
            });

            response.data['id'] = 1;
            var multidata = convertMultichoiseData(response.data);
            //console.log("multidata=", multidata, "original=", response.data);

            //create json data for editor, prevent call to REST service using "forceData": true
            let jsonData = {
                "content": [
                    multidata
                ],
                "notify": null,
                "totalPages": 1,
                "totalElements": 1,
                "last": true,
                "size": 12,
                "number": 0,
                "sort": {
                    "empty": false,
                    "unsorted": false,
                    "sorted": true
                },
                "first": true,
                "numberOfElements": 1,
                "empty": false,
                "forceData": true
            }

            WJ.debugTimer("createDatatable");

            componentDatatable = WJ.DataTable({
                id: 'component-datatable',
                url: '/admin/rest/components',
                initialData: jsonData,
                columns: componentColumns,
                serverSide: false,
                editorId: "id",
                fetchOnCreate: false,
                fetchOnEdit: false,
                idAutoOpener: true,
                tabs: response.tabs,
                editorLocking: false,
                hideTable:true
            });

            WJ.debugTimer("AFTER createDatatable");

            if (response.options != null) {
                componentDatatable.updateOptionsFromJson(response);
            }

            componentDatatable.EDITOR.on('open', function (e, mode, action) {
                WJ.debugTimer("open");

                var foundParentTitle = false;
                var dialogBodyElements = window.parent.parent.$(".cke_editor_data_dialog .cke_dialog_body");
                //iterate over if and try to find one with iframe
                dialogBodyElements.each(function(index, element) {
                    var $this = $(element);
                    var iframe = $this.find("iframe");
                    if (iframe.length > 0 && iframe.attr("src").indexOf("webjetcomponet.jsp") > 0) {
                        var titleElement = $this.find(".cke_dialog_title");
                        if (titleElement.length > 0) {
                            titleElement.text(response.title);
                            foundParentTitle = true;
                            //remove top border and hide title in this window
                            titleElement.parent().find("table.cke_dialog_contents tr:first-child td.cke_dialog_contents_body:first-child")[0].style.setProperty("border-top-width", "0px", "important");
                            $("#"+componentDatatable.DATA.id+"_modal div.DTE_Header_Content h5.modal-title").parent().hide();

                            //update iframe heights
                            $(".iframeFieldType").each(function(index, element) {
                                var $this = $(element);
                                //console.log("iframe=", $this, "height=", $this.attr("height"));
                                $this.css("height", "521px");
                                $this.find("iframe").attr("height", "521");
                            });
                        }
                    }
                });

                if (foundParentTitle === false) {
                    $("#"+componentDatatable.DATA.id+"_modal div.DTE_Header_Content h5.modal-title").parent().show();
                    $("#"+componentDatatable.DATA.id+"_modal div.DTE_Header_Content h5.modal-title").text(response.title);
                }
            });

            if (response.componentPath != null && response.componentPath != '') {
                //it there is multiple path separated by comma use originalJspFileName is not empty otherwise use first one
                let paths = response.componentPath.split(",");
                //console.log("paths=", paths, "originalJspFileName=", originalJspFileName);
                if (paths.length > 1 && typeof originalJspFileName !== "undefined" && originalJspFileName != null && originalJspFileName != '') {
                    componentPath = originalJspFileName;
                } else {
                    componentPath = paths[0];
                }
            }

            if (typeof window.appAfterInit === "function") {
                window.appAfterInit(response, componentDatatable);
            }
        }

        /**
         * Convert multichoise data from string to array
         * @param componentColumns
         * @param data
         * @returns {*}
         */
        function convertMultichoiseData(data) {
            for (let column of componentColumns) {
                let fieldValue = data[column.data];
                //console.log("fieldValue=", fieldValue, "column=", column, "typeof=", typeof fieldValue);

                //replace &lt; and &gt; to < and >
                if (fieldValue != null && typeof fieldValue === "string") {
                    fieldValue = fieldValue.replace(/&amp;lt;/gi, "<").replace(/&lt;/gi, "<").replace(/&amp;gt;/gi, ">").replace(/&gt;/gi, ">");
                    data[column.data] = fieldValue;
                }

                if (fieldValue != null && typeof column.className != "undefined" && column.className != null && column.className.indexOf("dt-style-base64")!=-1) {
                    fieldValue = WJ.base64decode(fieldValue);
                    data[column.data] = fieldValue;
                }

                if("checkbox" == column.editor.type && typeof fieldValue === "string") {
                    //It's multichoise (checkbox multichoise), convert to array
                    if(fieldValue === null || fieldValue === undefined) fieldValue = [];
                    else data[column.data] = fieldValue.split("+");
                }

                if("select" == column.editor.type && true === column.editor.multiple) {
                    if(fieldValue === null || fieldValue === undefined) {
                        fieldValue = [];
                    } else if (typeof fieldValue === "string") {
                        //It's multichoice (select multichoice), convert to array
                        data[column.data] = fieldValue.split("+");
                    }
                }
            }

            return data;
        }

        function Ok() {
            try {
                let params = componentDatatable.EDITOR.get();
                delete params['id'];

                if (typeof window.appGetComponentCode === "function") {
                    let include = window.appGetComponentCode(componentPath, params, componentDatatable);
                    //console.log("include=", include);
                    if (typeof include != "undefined" && include != null) {
                        $("#componentCode", window.parent.document).val(include);
                        return true;
                    }
                }

                if (typeof window.appGetComponentPath === "function") {
                    componentPath = window.appGetComponentPath(componentPath, componentDatatable);
                }

                let include = "!INCLUDE(" + componentPath;
                if (Object.keys(params).length > 0) {
                    include += ", " + convertObjectToInludeParams(params);
                }
                include += ")!";
                $("#componentCode", window.parent.document).val(include);
                return true;
            } catch (e) {
                console.log(e);
            }
            return false;
        }

        /**
         * Add quotes, do not add for:
         * - numbers/boolean values
         * - simple one word without special characters
         * @param value value to add quotes
         */
        function addQuotes(value) {
            if (value == null || value === "") return "";
            if (isNaN(value)===false) return value;
            if ("true"===value || "false"===value) return value;
            //if value is simple one word without special characters
            if (/^[a-zA-Z0-9+]+$/.test(value)) return value;

            return '"' + value + '"';
        }

        function convertObjectToInludeParams(params) {
            let result = [];
            for (let column of componentColumns) {

                let key = column.data;
                let value = params[key];

                //skip id or static text
                if ("id"===key || "dt-format-static-text"===column.renderFormat) continue;
                if ("dt-format-datatable" === column.renderFormat) {
                    //skip datatable
                    continue;
                }

                if (typeof column.className != "undefined" && column.className != null && column.className.indexOf("dt-style-base64")!=-1) {
                    value = WJ.base64encode(value);
                }

                // boolean prichadza ako array
                //console.log("key=", key, "value=", value, "typeof=", typeof value, "isArray=", Array.isArray(value));

                //skip field type iframe
                if (componentDatatable.EDITOR.field(key).dom.container.hasClass("DTE_Field_Type_iframe")) continue;

                //GroupDetails/DocDetails object
                if (typeof value == "object") {
                    try {
                        var id = null;

                        var valueArray = Array.isArray(value) ? value : [value];

                        for (var item of valueArray) {
                            //console.log("item=", item);
                            if (item == null) continue;

                            var idToAdd = null;
                            if (typeof item.id != "undefined") idToAdd = item.id;
                            else if (typeof item.docId != "undefined") idToAdd = item.docId;
                            else if (typeof item.groupId != "undefined") idToAdd = item.groupId;

                            //console.log("idToAdd=", idToAdd);

                            if (id == null) id = idToAdd;
                            else id += "+" + idToAdd;
                        }

                        //console.log("key=", key, " id=", id);

                        if (id != null) {
                            result.push(key + '=' + addQuotes(id));
                            continue;
                        }
                    } catch (e) {
                        console.log(e);
                    }
                }

                //For multichoise (checkbox multichoise, select multichoise) join values using "+"
                if(Array.isArray(value)) {
                    value = value.join("+");
                }

                if (typeof value === "string") {
                    //same as in common.jsp addIncludeParameter
                    value = value.replace(/"/gi, "\\\"");
                    value = value.replace('<',"&lt;");
                    value = value.replace('</',"&lt;/");
                    value = value.replace('>',"&gt;");

                    if (value === "" || value === "0") {
                        if ("device" === key || "cacheMinutes" === key) {
                            //skip empty device and cacheMinutes parameters
                            continue;
                        }
                    }
                }
                result.push(key + '=' + addQuotes(value));
            }
            const includeParams = result.join(", ");
            //console.log(includeParams);
            return includeParams;
        }

    div(data-th-include="${appIncludePath}" data-th-remove="tag")

    <table id="component-datatable" class="datatableInit table"></table>
