extends ../../partials/iframe

block content

    style.
        .modal-header {
            margin-top: 0px !important;
            border-top-width: 0px !important;
            padding-right: 0px !important;
        }
        #component-datatable_modal .modal-header .DTE_Header_Content .row .col-sm-4 {
            width: 33.33333333% !important;
        }
        #component-datatable_modal div.DTE_Action_Edit div.DTE_Footer {
            display: none;
        }
        html.in-iframe .DTE_nested_modal.show .modal-dialog {
            margin-top: 0px !important;
        }

    script.
        let componentDatatable = null,
            componentClass,
            componentPath = null,
            componentColumns = null,
            componentJson = null,
            requestJson = null,
            multidata = null,
            jsonData = null,
            originalJspFileName = null;

        //WJ.debugTimer(true);
        WJ.debugTimer("component.pug");

        window.domReady.add(function () {
            componentJson = [(${componentJson})];
            requestJson = [(${requestJson})];
            //console.log("componentJson=", componentJson, "requestJson=", requestJson);

            if (componentJson == null || requestJson == null) {
                return;
            }

            componentClass = requestJson.className;
            let parameters = requestJson.parameters;
            let docId = requestJson.docId;
            let groupId = requestJson.groupId;
            let title = requestJson.pageTitle;
            let originalComponentName = requestJson.originalComponentName;
            originalJspFileName = requestJson.originalJspFileName;

            componentPath = componentClass;

            //console.log("PUG docId=", docId, "groupId=", groupId, "title=", title, "componentPath=", componentPath, "originalComponentName=", originalComponentName, "originalJspFileName=", originalJspFileName);

            if (componentClass === '') {
                return;
            }

            //console.log("parameters=", parameters);

            let data = {
                    className: componentClass,
                    parameters: parameters,
                    docId: docId,
                    groupId: groupId,
                    pageTitle: title
            };

            if (typeof window.appBeforeXhr === "function") {
                window.appBeforeXhr(data);
            }

            WJ.debugTimer("has data");

            if (componentJson != null) {
                createDatatable(componentJson);
            }
            //WJ.debugTimer("end");
        });

        function createDatatable(response) {
            //console.log("success, response=", response);
            if (typeof response.error !== 'undefined') {
                WJ.notifyError(response.error);
                return;
            }

            if (typeof window.appAfterXhr === "function") {
                window.appAfterXhr(response);
            }

            componentColumns = response.columns;

            componentColumns.push({
                "data" : "id",
                "name" : "id",
                "title" : "ID",
                "defaultContent" : "",
                "className" : "dt-select-td cell-not-editable",
                "renderFormat" : "dt-format-selector",
                "editor" : {
                    "type" : "hidden",
                    "required" : false
                },
                "sortAfter" : "",
                "perms" : "",
                "array" : false
            });

            response.data['id'] = 1;
            //console.log("response.data=", response.data);
            multidata = convertData(response.data);

            //console.log("multidata=", multidata, "original=", response.data);

            //create json data for editor, prevent call to REST service using "forceData": true
            jsonData = {
                "content": [
                    multidata
                ],
                "notify": null,
                "totalPages": 1,
                "totalElements": 1,
                "last": true,
                "size": 12,
                "number": 0,
                "sort": {
                    "empty": false,
                    "unsorted": false,
                    "sorted": true
                },
                "first": true,
                "numberOfElements": 1,
                "empty": false,
                "forceData": true
            }

            WJ.debugTimer("createDatatable");

            componentDatatable = WJ.DataTable({
                id: 'component-datatable',
                url: '/admin/rest/components',
                initialData: jsonData,
                columns: componentColumns,
                serverSide: false,
                editorId: "id",
                fetchOnCreate: false,
                fetchOnEdit: false,
                idAutoOpener: true,
                tabs: response.tabs,
                editorLocking: false,
                hideTable:true
            });

            WJ.debugTimer("AFTER createDatatable");

            if (response.options != null) {
                componentDatatable.updateOptionsFromJson(response);
            }

            componentDatatable.EDITOR.on('open', function (e, mode, action) {
                WJ.debugTimer("open");

                var foundParentTitle = false;
                var dialogBodyElements = window.parent.parent.$(".cke_editor_data_dialog .cke_dialog_body");
                //iterate over if and try to find one with iframe
                dialogBodyElements.each(function(index, element) {
                    var $this = $(element);
                    var iframe = $this.find("iframe");
                    if (iframe.length > 0 && iframe.attr("src").indexOf("webjetcomponet.jsp") > 0) {
                        var titleElement = $this.find(".cke_dialog_title");
                        if (titleElement.length > 0) {
                            titleElement.text(response.title);
                            foundParentTitle = true;
                            //remove top border and hide title in this window
                            titleElement.parent().find("table.cke_dialog_contents tr:first-child td.cke_dialog_contents_body:first-child")[0].style.setProperty("border-top-width", "0px", "important");
                            $("#"+componentDatatable.DATA.id+"_modal div.DTE_Header_Content h5.modal-title").parent().hide();

                            //update iframe heights
                            $(".iframeFieldType").each(function(index, element) {
                                var $this = $(element);
                                //console.log("iframe=", $this, "height=", $this.attr("height"));
                                $this.css("height", "521px");
                                $this.find("iframe").attr("height", "521");
                            });
                        }
                    }
                });

                if (foundParentTitle === false) {
                    $("#"+componentDatatable.DATA.id+"_modal div.DTE_Header_Content h5.modal-title").parent().show();
                    $("#"+componentDatatable.DATA.id+"_modal div.DTE_Header_Content h5.modal-title").text(response.title);
                }
            });

            if (response.componentPath != null && response.componentPath != '') {
                //it there is multiple path separated by comma use originalJspFileName is not empty otherwise use first one
                let paths = response.componentPath.split(",");
                //console.log("paths=", paths, "originalJspFileName=", originalJspFileName);
                if (paths.length > 1 && typeof originalJspFileName !== "undefined" && originalJspFileName != null && originalJspFileName != '') {
                    componentPath = originalJspFileName;
                } else {
                    componentPath = paths[0];
                }
            }

            window.addEventListener("WJ.DTE.opened", function () {
                //set componentPath to select if exists
                let $appComponentPathSelect = $(".DTED.show .dt-app-componentPath select");
                if ($appComponentPathSelect.length > 0) {
                    $appComponentPathSelect.selectpicker("val", originalJspFileName);
                    $appComponentPathSelect.trigger("change");
                }
            });

            let isInsert = (requestJson.originalComponentName == null && requestJson.originalJspFileName == null);
            if (typeof window.appAfterInit === "function") {
                window.appAfterInit(response, componentDatatable, componentPath, isInsert);
            }
        }

        /**
         * Convert multichoise data from string to array
         * @param componentColumns
         * @param data
         * @returns {*}
         */
        function convertData(data) {
            for (let column of componentColumns) {
                let fieldValue = data[column.data];
                //console.log("fieldValue=", fieldValue, "column=", column, "typeof=", typeof fieldValue);

                //replace &lt; and &gt; to < and >
                if (fieldValue != null && typeof fieldValue === "string") {
                    fieldValue = fieldValue.replace(/&amp;lt;/gi, "<").replace(/&lt;/gi, "<").replace(/&amp;gt;/gi, ">").replace(/&gt;/gi, ">");
                    data[column.data] = fieldValue;
                }

                if (fieldValue != null && typeof column.className != "undefined" && column.className != null && column.className.indexOf("dt-style-base64")!=-1) {
                    fieldValue = WJ.base64decode(fieldValue);
                    data[column.data] = fieldValue;
                }

                if("checkbox" == column.editor.type && typeof fieldValue === "string") {
                    //It's multichoise (checkbox multichoise), convert to array
                    if(fieldValue === null || fieldValue === undefined) fieldValue = [];
                    else data[column.data] = fieldValue.split("+");
                }

                if("select" == column.editor.type && true === column.editor.multiple) {
                    if(fieldValue === null || fieldValue === undefined) {
                        fieldValue = [];
                    } else if (typeof fieldValue === "string") {
                        let multipleSeparator = getMultipleSeparator(column);
                        //It's multichoice (select multichoice), convert to array
                        data[column.data] = fieldValue.split(multipleSeparator);
                    }
                }

                if(isLocalJson(column) && typeof fieldValue === "string") {
                    //It's json, decode it
                    //console.log("Decoding JSON data for column:", column.data, "value:", fieldValue);
                    let decoded = decodeJSONData(fieldValue);
                    //add ID and rowOrder to each item in the JSON array
                    decoded = prepareJsonEditorData(decoded);

                    //console.log("decoded=", decoded);
                    if (decoded != null) {
                        data[column.data] = decoded;
                    } else {
                        console.warn("Failed to decode JSON data for column:", column.data);
                    }
                }
            }

            return data;
        }

        function Ok() {
            try {
                let params = componentDatatable.EDITOR.get();
                delete params['id'];

                /*
                In some instances, we want to wrap INCLUDE in html code, like ForumApp in section,
                BUT we NEED to know, if this is first time (inserting new app) or it's only update.

                If we allways wrap include, we nest this bonus html with every edit of app. For this reason
                we check is it's "INSERT" or "UPADTE" action.
                */
                let isInsert = (requestJson.originalComponentName == null && requestJson.originalJspFileName == null);

               //appGetComponentPath before appGetComponentCode ... so component code can obtain allready modified path
                if (typeof window.appGetComponentPath === "function") {
                    componentPath = window.appGetComponentPath(componentPath, componentDatatable);
                } else {
                    let $appComponentPathSelect = $(".DTED.show .dt-app-componentPath select");
                    if ($appComponentPathSelect.length > 0) {
                        componentPath = $appComponentPathSelect.val();
                    }
                }

                if (typeof window.appGetComponentCode === "function") {
                    let include = window.appGetComponentCode(componentPath, params, componentDatatable, isInsert);
                    if (typeof include != "undefined" && include != null) {
                        $("#componentCode", window.parent.document).val(include);
                    } else {
                        setDefaultInclude(params);
                    }
                } else {
                   setDefaultInclude(params);
                }

                if (typeof window.appCodeExecute === "function") {
                    //window.appCodeExecute must close window by itself and can be async
                    setTimeout(()=>appCodeExecuteAsync(params), 10);
                    return false;
                }

                return true;
            } catch (e) {
                console.log(e);
            }
            return false;
        }

        async function appCodeExecuteAsync(params) {
            let executed = await window.appCodeExecute(params);
            //undefined is when function doesn't return anything
            if (typeof executed === "undefined" || executed === true) {
                //close modal
                window.parent.setComponentData();
                window.parent.Cancel();
            }
        }

        function setDefaultInclude(params) {
            let include = "!INCLUDE(" + componentPath;
            if (Object.keys(params).length > 0) {
                include += ", " + convertObjectToInludeParams(params);
            }
            include += ")!";
            $("#componentCode", window.parent.document).val(include);
        }

        /**
         * Add quotes, do not add for:
         * - numbers/boolean values
         * - simple one word without special characters
         * @param value value to add quotes
         */
        function addQuotes(value) {
            if (value == null || value === "") return "";
            if (isNaN(value)===false) return value;
            if ("true"===value || "false"===value) return value;
            //if value is simple one word without special characters
            if (/^[a-zA-Z0-9+]+$/.test(value)) return value;

            return '"' + value + '"';
        }

        /**
         * For DataTableColumnType.DATATABLE verify data-dt-field-dt-localJson value
        */
        function isLocalJson(column) {
            let isLocalJson = false;
            if ("dt-format-datatable" === column.renderFormat && typeof column.editor != "undefined" && column.editor != null && typeof column.editor.attr != "undefined" && column.editor.attr != null) {
                    $.each(column.editor.attr, function (key, value) {
                            if (key === "data-dt-field-dt-localJson") {
                                isLocalJson = (value === "true");
                            }
                    });
            }
            return isLocalJson;
        }

        function getMultipleSeparator(column) {
            let multipleSeparator = "+";
            if (typeof column.editor != "undefined" && typeof column.editor.attr != "undefined" && column.editor.attr != null) {
                //check if there is separator attribute
                if (typeof column.editor.attr.separator != "undefined") {
                    multipleSeparator = column.editor.attr.separator;
                }
            }
            //console.log("getMultipleSeparator column=", column, " multipleSeparator=", multipleSeparator);
            return multipleSeparator;
        }

        function convertObjectToInludeParams(params) {
            let result = [];
            for (let column of componentColumns) {

                let key = column.data;
                let value = params[key];

                //skip id or static text
                if ("id"===key || "dt-format-static-text"===column.renderFormat) continue;
                if ("dt-format-datatable" === column.renderFormat) {
                    //console.log("isLocalJson=", isLocalJson, "value=", value, "typeof=", typeof value);
                    if (isLocalJson(column)===false) {
                        //skip this column, it's datatable with separate REST service
                        continue;
                    } else {
                        //remove ID and rowOrder columns from json
                        if (typeof value === "object" && Array.isArray(value)) {
                            //remove id and rowOrder from each item in array
                            for (let i = 0; i < value.length; i++) {
                                delete value[i].id;
                                delete value[i].rowOrder;
                            }
                        }
                        //base64 encode JSON data
                        value = encodeJSONData(value);
                    }
                }

                if (typeof column.className != "undefined" && column.className != null) {
                    if (column.className.indexOf("dt-app-skip")!=-1) {
                        //skip this columns, it's just supporting column not used in include
                        continue;
                    }
                    else if (column.className.indexOf("dt-style-base64")!=-1) {
                        value = WJ.base64encode(value);
                    }
                }

                // boolean prichadza ako array
                //console.log("key=", key, "value=", value, "typeof=", typeof value, "isArray=", Array.isArray(value));

                //skip field type iframe
                if (componentDatatable.EDITOR.field(key).dom.container.hasClass("DTE_Field_Type_iframe")) continue;

                //GroupDetails/DocDetails object
                if (typeof value == "object") {
                    try {
                        var id = null;

                        var valueArray = Array.isArray(value) ? value : [value];

                        let multipleSeparator = getMultipleSeparator(column);

                        for (var item of valueArray) {
                            //console.log("item=", item);
                            if (item == null) continue;

                            var idToAdd = null;
                            if (typeof item.id != "undefined") idToAdd = item.id;
                            else if (typeof item.docId != "undefined") idToAdd = item.docId;
                            else if (typeof item.groupId != "undefined") idToAdd = item.groupId;

                            //console.log("idToAdd=", idToAdd);

                            if (id == null) id = idToAdd;
                            else id += multipleSeparator + idToAdd;
                        }

                        //console.log("key=", key, " id=", id);

                        if (id != null) {
                            result.push(key + '=' + addQuotes(id));
                            continue;
                        }
                    } catch (e) {
                        console.log(e);
                    }
                }

                //For multichoise (checkbox multichoise, select multichoise) join values using "+"
                if(Array.isArray(value)) {
                    let multipleSeparator = getMultipleSeparator(column);
                    value = value.join(multipleSeparator);
                }

                if (typeof value === "string") {
                    //same as in common.jsp addIncludeParameter
                    value = value.replace(/"/gi, "\\\"");
                    value = value.replace('<',"&lt;");
                    value = value.replace('</',"&lt;/");
                    value = value.replace('>',"&gt;");

                    if (value === "" || value === "0") {
                        if ("device" === key || "cacheMinutes" === key || "showForLoggedUser" === key) {
                            //skip common settings parameters
                            continue;
                        }
                    }
                }
                result.push(key + '=' + addQuotes(value));
            }
            const includeParams = result.join(", ");
            //console.log(includeParams);
            return includeParams;
        }

        /**
        * For backward compatibility with JSON editor we can't use WJ.base64decode
        */
        const decodeJSONData = function(inputData) {
            try {
                // Uistite sa, že je vstup platný Base64 reťazec
                if (!inputData) throw new Error("Input data is empty");

                // Dekódujeme Base64 a dekódujeme URI, pričom nahrádzame '%2B' späť na '+'
                const parsed = JSON.parse(decodeURI(atob(inputData)).replace(/\%2B/gi, "+"));
                return parsed;
            } catch (e) {
                return null;
            }
        };

        /**
        * For backward compatibility with JSON editor we can't use WJ.base64encode
        */
        const encodeJSONData = function(inputData) {
            try {
                // Uistite sa, že inputData nie je undefined alebo null
                if (inputData === undefined || inputData === null || inputData === "") return "";

                // Kódujeme JSON do URI a následne Base64, pričom nahrádzame '+' na '%2B'
                let encoded = encodeURI(JSON.stringify(inputData));
                encoded = encoded.replace(/\+/gi, "%2B");
                //base64 encode it
                return btoa(encoded);
            } catch (e) {
                console.error("Failed to encode JSON data:", e);
                return null;  // Vráťte null v prípade chyby
            }
        };

        /**
        * Add id's and rowOrder to json editor data objects so datatable works properly
        * @param {*} editorData
        * @returns
        */
        const prepareJsonEditorData = function(editorData) {
            if(editorData == undefined || editorData == null || editorData == "" || Array.isArray(editorData) == false) return [];

            editorData.forEach((item, index) => {
                item.id = index + 1; // Add 1-based ID
                item.rowOrder = (index + 1)*10; // Add rowOrder for row reordering
            });

            return editorData;
        }

        window.addEventListener("WJ.DTE.opened", function(e) {
            if (e.detail.dte.TABLE.DATA.nestedModal === true) {
                //disable parent modal header/footer
                window.parent.parent.$(".cke_dialog_container").addClass("DTE_nested_modal_open");
            }
        });
        window.addEventListener("WJ.DTE.close", function(e) {
            if (e.detail.dte.TABLE.DATA.nestedModal === true) {
                window.parent.parent.$(".cke_dialog_container").removeClass("DTE_nested_modal_open");
            }
        });

    div(data-th-include="${appIncludePath}" data-th-remove="tag")

    <table id="component-datatable" class="datatableInit table"></table>
