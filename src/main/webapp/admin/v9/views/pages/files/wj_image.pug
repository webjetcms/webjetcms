extends ../../partials/iframe

block content

    include jsinclude

    //-fck_dialog_common
    script(type="text/javascript", src="/admin/skins/webjet8/ckeditor/dist/plugins/webjet/js/fck_dialog_common.jsp")

    script.
        var lastDocId = -1;
        var lastGroupId = -1;
        var lastVirtualPath = "";
        var lastTitle = "";
        var elFinderInstance;

        //ThymeLeaf variables
        let uploadIcon = "[(${uploadIcon})]";
        let setfield = "[(${setfield})]";

        let denyImageSize = [(${denyImageSize})];
        let elfinderMetadataEnabled = [(${elfinderMetadataEnabled})];
        let editorImageDialogCopyAltToTitle = [(${editorImageDialogCopyAltToTitle})];
        let editorAdvancedImageAlignment = [(${editorAdvancedImageAlignment})];
        let haveFileIndexerPerm = [(${haveFileIndexerPerm})];

        var wjCkMapping = [
            {wj: 'txtUrl', tab:'info', ck:'txtUrl'},
            {wj: 'txtAlt', tab:'info', ck:'txtAlt'},
            {wj: 'cmbAlign', tab:'info', ck:'cmbAlign'}
        ];

        let commands = [
            'archive', 'back', 'copy', 'cut', 'download', 'duplicate', 'edit', 'extract',
            'forward', 'getfile', 'help', 'home', 'info', 'mkdir', 'mkfile', 'netmount',
            'open', 'paste', 'quicklook', 'reload', 'rename', 'resize', 'rm',
            'sort', 'up', 'upload', 'view',
            'wjedit', 'wjfilearchive', 'wjsearch', 'wjfileopen', 'wjfileupdate', 'wjfileprops', 'wjdirprops', 'wjeditswitch'
        ];

        let files = [
            'wjeditswitch', 'wjfileopen', 'wjfileupdate',
            '|',
            'quicklook',
            '|',
            'download',
            '|',
            'copy', 'cut', 'paste', 'duplicate',
            '|',
            'rm',
            '|',
            'rename',
            '|',
            'archive', 'extract',
            '|',
            'info', 'wjfileprops', 'wjdirprops'
        ];

        let toolbar = [
             ['back', 'up', 'forward'],
            ['paste', 'cut', 'copy'],
            ['upload', 'mkdir', 'reload'],
            ['view', 'sort'],
            ['wjsearch']
        ];

        if(elfinderMetadataEnabled === true) {
            commands.push('wjmetadata');
            files.push('wjmetadata');
        }

        function selectLink(link, lastModified)
        {
            //console.log("selectLink", link, lastModified);
            var urlPath = link;
            try
            {
                var classNames = window.parent.CKEDITOR.dialog.getCurrent().getContentElement("advanced", "txtGenClass").getValue();
                if (classNames != undefined && classNames != null && classNames.indexOf("fixedSize")!=-1)
                {
                    var actualWidth = window.parent.CKEDITOR.dialog.getCurrent().getContentElement("info", "txtWidth").getValue();
                    var actualHeight = window.parent.CKEDITOR.dialog.getCurrent().getContentElement("info", "txtHeight").getValue();
                    var ip=6;
                    try
                    {
                        //podpora pre zadanie css ako fixedSize-700-400
                        var fixedSizeRegex = /fixedSize-(\d+)-(\d+)(?:-(\d+))?/gi;
                        var matched = fixedSizeRegex.exec(classNames);
                        //console.log(matched);
                        if (matched != null && matched.length == 4)
                        {
                            actualWidth = matched[1];
                            actualHeight = matched[2];
                            if (matched[3]!=undefined) ip = matched[3];
                            if ("0"==actualWidth || 0==actualWidth) actualWidth="";
                            if ("0"==actualHeight || 0==actualHeight) actualHeight="";
                        }
                    } catch (e) {}
                    if (urlPath.indexOf("http")!=0 && (urlPath.indexOf(".jpg")>0 || urlPath.indexOf(".jpeg")>0 || urlPath.indexOf(".png")>0 || urlPath.indexOf(".gif")>0))
                    {
                        if (urlPath.indexOf("/thu"+"mb")==-1) urlPath = "/thu"+"mb" + urlPath;
                        urlPath = WJ.urlUpdateParam(urlPath, "w", actualWidth);
                        urlPath = WJ.urlUpdateParam(urlPath, "h", actualHeight);
                        urlPath = WJ.urlUpdateParam(urlPath, "ip", ip);
                    }
                }
                if (classNames != undefined && classNames != null && classNames=="")
                {
                    window.parent.CKEDITOR.dialog.getCurrent().getContentElement("advanced", "txtGenClass").setValue("img-responsive img-fluid");
                }
            }
            catch (e) { console.log(e); }

            if (typeof lastModified != "undefined") urlPath = WJ.urlUpdateParam(urlPath, "v", lastModified);

            GetE('txtUrl').value=urlPath;

            updateValuesToCk();
        }

        function copyAltToTitle()
        {
            GetE('txtAttTitle').value = GetE('txtAlt').value;
        }

        function initializeElfinder() {
            var docId = window.parent.getCkEditorInstance().element.$.form.docId.value;
            var groupId = window.parent.getCkEditorInstance().element.$.form.groupId.value;
            var virtualPath = window.parent.getCkEditorInstance().element.$.form.virtualPath.value;

            lastDocId = docId;
            lastGroupId = groupId;
            lastVirtualPath = virtualPath;
            lastTitle = getPageNavbar();

            var customData = {
                volumes: "images",
                docId: docId,
                groupId: groupId,
                title: getPageNavbar()
            }

            var file = $('#txtUrl').val();
            if (file.indexOf("/images")!=0 && file.indexOf("/files")!=0 && file.indexOf("/thumb")!=0)
            {
                file = "";
            }
            //console.log(file);
            if (file != "") {
                customData.startPath = file.substring(0, file.lastIndexOf('/'));
            }
            //console.log("Init customData=", customData);

            elFinderInstance = $('#finder').elfinder({
                url: '/admin/elfinder-connector/',
                enableByMouseOver: false,
                width: '100%',
                resizable: false,
                rememberLastDir: false,
                requestType: 'post',
                customData: customData,
                getFileCallback: function(files, fm)
                {
                    //must be there otherwise getfile event will not be called
                },
                handlers: {
                    select: function(event, elfinderInstance)
                    {
                        //console.log("select", event.data.selected);
                        var selected = event.data.selected;
                        var files = elfinderInstance.selectedFiles();
                        //v nazve musi byt znak bodka - prevencia pred vybratim adresara klikanim v strome
                        if (files.length == 1 && files[0].virtualPath.indexOf(".")!=-1) {
                            selectLink(files[0].virtualPath, files[0].ts);
                        }
                    },
                    add: function(event, elfinderInstance) {
                        processEventReload(event, elfinderInstance);
                    },
                    remove: function(event, elfinderInstance) {
                        processEventReload(event, elfinderInstance);
                    },
                    change: function(event, elfinderInstance) {
                        processEventReload(event, elfinderInstance);
                    },
                    getfile: function(event, elfinderInstance) {
                        //console.log("getfile", event);
                        //close elfinder window, select was called before
                        window.parent.CKEDITOR.dialog.getCurrent()._.buttons['ok'].click();
                    },
                },
                lang: window.userLng,
                baseUrl: "/admin/elFinder/", //Needed for loading main css style (theme)
                commands: commands,
                contextmenu: {
                    files: files
                },
                ui: ['toolbar', 'tree', 'path', 'stat'],
                uiOptions: {
                    toolbar: toolbar
                },
            }).elfinder('instance');

            var toolbarFixApplied = false;
            elFinderInstance.bind('lazydone', function(event) {
                if (!toolbarFixApplied) {
                    toolbarFixApplied = true;
                    if (file != "") {
                        setTimeout(function() { openElfinderInFolder(file); }, 300);
                    } else {
                        setTimeout(function() { openDefaultImageFolder(true); }, 300);
                    }
                    setInitialElfinderHeight();
                }
            });
            elFinderInitialized = true;
        }

        function updateElfinderCustomData()
        {
            var docId = window.parent.getCkEditorInstance().element.$.form.docId.value;
            var groupId = window.parent.getCkEditorInstance().element.$.form.groupId.value;
            var virtualPath = window.parent.getCkEditorInstance().element.$.form.virtualPath.value;
            //console.log("Update elfinder data, docid="+docId+" groupId="+groupId, " virtualPath="+virtualPath);

            var customData = {
                    volumes: "images",
                    docId: docId,
                    groupId: groupId,
                    title: getPageNavbar()
            }
            var file = $('#txtUrl').val();
            //console.log("file=", file);
            if (file.indexOf("/images")!=0 && file.indexOf("/files")!=0 && file.indexOf("/thumb")!=0)
            {
                file = "";
            }
            //console.log(file);
            if (file != "")
            {
                customData.startPath = file.substring(0, file.lastIndexOf('/'));
            }
            elFinderInstance.options.customData = customData;
            elFinderInstance.optsCustomData = customData;
            elFinderInstance.customData = customData;
            //zvol prvy element v "Aktualna stranka"
            var openTimeout = 100;
            var reload = false
            if (lastDocId != docId || lastGroupId != groupId || virtualPath != lastVirtualPath || getPageNavbar() != lastTitle)
            {
                //console.log("RELOADING, virtualPath="+virtualPath+" lastVirtualPath="+lastVirtualPath);
                reload = true;
                openTimeout = 500;
            }
            if (reload)
            {
                setTimeout(function() {
                    openDefaultImageFolder(reload);
                }, openTimeout);
            }
            lastDocId = docId;
            lastGroupId = groupId;
            lastVirtualPath = virtualPath;
            lastTitle = getPageNavbar();
            //console.log("FILE2="+file);
            if (file != "")
            {
                setTimeout(function() {
                    openElfinderInFolder(file);
                }, openTimeout);
            }
        }

    #finder [[\#{divpopup-blank.wait_please}]]

    .innerPadding
        style(type='text/css').
            table.urlFormTable { width: 100%; }
        table.urlFormTable
            tr
                td(data-th-title='\#{elfinder.image.urlTitle}').cke_dialog_ui_vbox_child
                    label.cke_dialog_ui_labeled_label [[\#{components.groupEdit.url_info}]]:
                td(colspan='2').cke_dialog_ui_vbox_child
                    div.cke_dialog_ui_input_text
                        input#txtUrl(style='width: 100%' type='text' class="form-control cke_dialog_ui_input_text")
            tr
                td(data-th-title='\#{elfinder.image.altTitle}' style='white-space: nowrap; width: 90px;').cke_dialog_ui_vbox_child
                    label.cke_dialog_ui_labeled_label [[\#{editor.image.alt}]]:
                td.cke_dialog_ui_vbox_child
                    div.cke_dialog_ui_input_text
                        input#txtAlt(style='width: 100%;' type='text' class="form-control cke_dialog_ui_input_text")
                td(style='white-space: nowrap; width: 200px;').cke_dialog_ui_vbox_child
                    label.cke_dialog_ui_labeled_label.secondLabel [[\#{editor.image.align}]]:
                    select#cmbAlign(style='width: 100px;').cke_dialog_ui_input_select
                        option(value='') [[\#{editor.image.align_none}]]
                        option(value='left') [[\#{editor.image.align_left}]]
                        option(value='right') [[\#{editor.image.align_right}]]

    script.
        if(editorAdvancedImageAlignment == true) {
            $("#cmbAlign").append(new Option("[[\#{editor.image.align_baseline}]]", "baseline"));
            $("#cmbAlign").append(new Option("[[\#{editor.image.align_top}]]", "top"));
            $("#cmbAlign").append(new Option("[[\#{editor.image.align_texttop}]]", "text-top"));
            $("#cmbAlign").append(new Option("[[\#{editor.image.align_middle}]]", "baseline"));
            $("#cmbAlign").append(new Option("[[\#{editor.image.align_bottom}]]", "bottom"));
        }

        if(setfield !== undefined && setfield !== null && setfield !== "") {
            GetE('txtUrl').value = window.parent.dialogArguments.Editor.document.[[\#{setfield}]].value;
        }

        if(editorImageDialogCopyAltToTitle === true) {
            let txtAlt = $("#txtAlt");
            if(textAlt !== undefined && textAlt !== null && txtAlt.length > 0) {
                txtAlt.keydown(copyAltToTitle());
                txtAlt.focus(copyAltToTitle());
                txtAlt.blur(copyAltToTitle());
            }
            //out.print("window.setTimeout(copyAltToTitle, 2000);");
        }

        refreshValuesFromCk();
        setChangeHandlerToUpdateCk();